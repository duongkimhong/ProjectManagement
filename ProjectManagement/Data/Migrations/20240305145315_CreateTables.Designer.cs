// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.Models;

#nullable disable

namespace ProjectManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240305145315_CreateTables")]
    partial class CreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Models.Activities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ProjectManagement.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Models.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFullday")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("CalendarEvent");
                });

            modelBuilder.Entity("ProjectManagement.Models.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IssuesId");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjectManagement.Models.Documents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ProjectManagement.Models.EpicDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EpicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EpicsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsId");

                    b.HasIndex("EpicsId");

                    b.ToTable("EpicDocument");
                });

            modelBuilder.Entity("ProjectManagement.Models.EpicHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EpicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EpicsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EpicsId");

                    b.ToTable("EpicHistory");
                });

            modelBuilder.Entity("ProjectManagement.Models.Epics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReporterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SprintID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SprintsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReporterID");

                    b.HasIndex("SprintsId");

                    b.ToTable("Epics");
                });

            modelBuilder.Entity("ProjectManagement.Models.IssueDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsId");

                    b.HasIndex("IssuesId");

                    b.ToTable("IssueDocument");
                });

            modelBuilder.Entity("ProjectManagement.Models.IssueHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssuesId");

                    b.ToTable("IssueHistory");
                });

            modelBuilder.Entity("ProjectManagement.Models.Issues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssigneeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EpicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EpicsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReporterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SprintID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SprintsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("StoryPoint")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeID");

                    b.HasIndex("EpicsId");

                    b.HasIndex("ReporterID");

                    b.HasIndex("SprintsId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ProjectManagement.Models.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stick")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("RoomsId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ProjectManagement.Models.NoteCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NoteCategories");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NoteCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NoteCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoteContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NoteCategoriesId");

                    b.HasIndex("UserID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("ProjectDocument");
                });

            modelBuilder.Entity("ProjectManagement.Models.Projects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Rooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ProjectManagement.Models.Sprints", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectsId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("ProjectManagement.Models.TeamMembers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamsId");

                    b.HasIndex("UserID");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("ProjectManagement.Models.Teams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectsId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ProjectManagement.Models.UserRooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRooms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.Activities", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.CalendarEvent", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.Comments", b =>
                {
                    b.HasOne("ProjectManagement.Models.Issues", "Issues")
                        .WithMany("Comments")
                        .HasForeignKey("IssuesId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID");

                    b.Navigation("Issues");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.EpicDocument", b =>
                {
                    b.HasOne("ProjectManagement.Models.Documents", "Documents")
                        .WithMany("EpicDocument")
                        .HasForeignKey("DocumentsId");

                    b.HasOne("ProjectManagement.Models.Epics", "Epics")
                        .WithMany("EpicDocument")
                        .HasForeignKey("EpicsId");

                    b.Navigation("Documents");

                    b.Navigation("Epics");
                });

            modelBuilder.Entity("ProjectManagement.Models.EpicHistory", b =>
                {
                    b.HasOne("ProjectManagement.Models.Epics", "Epics")
                        .WithMany("EpicHistory")
                        .HasForeignKey("EpicsId");

                    b.Navigation("Epics");
                });

            modelBuilder.Entity("ProjectManagement.Models.Epics", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "Reporter")
                        .WithMany("Epics")
                        .HasForeignKey("ReporterID");

                    b.HasOne("ProjectManagement.Models.Sprints", "Sprints")
                        .WithMany("Epics")
                        .HasForeignKey("SprintsId");

                    b.Navigation("Reporter");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("ProjectManagement.Models.IssueDocument", b =>
                {
                    b.HasOne("ProjectManagement.Models.Documents", "Documents")
                        .WithMany("IssueDocument")
                        .HasForeignKey("DocumentsId");

                    b.HasOne("ProjectManagement.Models.Issues", "Issues")
                        .WithMany("IssueDocument")
                        .HasForeignKey("IssuesId");

                    b.Navigation("Documents");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("ProjectManagement.Models.IssueHistory", b =>
                {
                    b.HasOne("ProjectManagement.Models.Issues", "Issues")
                        .WithMany()
                        .HasForeignKey("IssuesId");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("ProjectManagement.Models.Issues", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "Assignee")
                        .WithMany("Assignee")
                        .HasForeignKey("AssigneeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Epics", "Epics")
                        .WithMany("Issues")
                        .HasForeignKey("EpicsId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "Reporter")
                        .WithMany("Reporter")
                        .HasForeignKey("ReporterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Sprints", "Sprints")
                        .WithMany("Issues")
                        .HasForeignKey("SprintsId");

                    b.Navigation("Assignee");

                    b.Navigation("Epics");

                    b.Navigation("Reporter");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("ProjectManagement.Models.Messages", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "FromUser")
                        .WithMany("FromUser")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Rooms", "Rooms")
                        .WithMany("Messages")
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ToUser")
                        .WithMany("ToUser")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Rooms");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notes", b =>
                {
                    b.HasOne("ProjectManagement.Models.NoteCategories", "NoteCategories")
                        .WithMany("Notes")
                        .HasForeignKey("NoteCategoriesId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserID");

                    b.Navigation("NoteCategories");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.HasOne("ProjectManagement.Models.Documents", "Documents")
                        .WithMany("ProjectDocument")
                        .HasForeignKey("DocumentsId");

                    b.HasOne("ProjectManagement.Models.Projects", "Projects")
                        .WithMany("ProjectDocument")
                        .HasForeignKey("ProjectsId");

                    b.Navigation("Documents");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Rooms", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UserAccount")
                        .WithMany("Rooms")
                        .HasForeignKey("UserAccountId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ProjectManagement.Models.Sprints", b =>
                {
                    b.HasOne("ProjectManagement.Models.Projects", "Projects")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectsId");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.TeamMembers", b =>
                {
                    b.HasOne("ProjectManagement.Models.Teams", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamsId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserID");

                    b.Navigation("Teams");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.Teams", b =>
                {
                    b.HasOne("ProjectManagement.Models.Projects", "Projects")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectsId");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.UserRooms", b =>
                {
                    b.HasOne("ProjectManagement.Models.Rooms", "Rooms")
                        .WithMany("UserRoom")
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany("UserRoom")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rooms");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.ApplicationUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Assignee");

                    b.Navigation("CalendarEvents");

                    b.Navigation("Comments");

                    b.Navigation("Epics");

                    b.Navigation("FromUser");

                    b.Navigation("Notes");

                    b.Navigation("Notifications");

                    b.Navigation("Reporter");

                    b.Navigation("Rooms");

                    b.Navigation("TeamMembers");

                    b.Navigation("ToUser");

                    b.Navigation("UserRoom");
                });

            modelBuilder.Entity("ProjectManagement.Models.Documents", b =>
                {
                    b.Navigation("EpicDocument");

                    b.Navigation("IssueDocument");

                    b.Navigation("ProjectDocument");
                });

            modelBuilder.Entity("ProjectManagement.Models.Epics", b =>
                {
                    b.Navigation("EpicDocument");

                    b.Navigation("EpicHistory");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("ProjectManagement.Models.Issues", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IssueDocument");
                });

            modelBuilder.Entity("ProjectManagement.Models.NoteCategories", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("ProjectManagement.Models.Projects", b =>
                {
                    b.Navigation("ProjectDocument");

                    b.Navigation("Sprints");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ProjectManagement.Models.Rooms", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserRoom");
                });

            modelBuilder.Entity("ProjectManagement.Models.Sprints", b =>
                {
                    b.Navigation("Epics");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("ProjectManagement.Models.Teams", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
